package com.example.demo.services;

import java.math.BigInteger;
import java.sql.Date;
import java.time.LocalDate;
import java.util.List;
import java.util.stream.Collectors;

import com.example.demo.models.Borrow;
import com.example.demo.repositories.BorrowRepository;
import org.springframework.stereotype.Service;
import com.example.demo.models.User;
import com.example.demo.models.Book;
import com.example.demo.models.Subscription;

import org.springframework.beans.factory.annotation.Autowired;
import com.example.demo.repositories.UserRepository;
import com.example.demo.repositories.BookRepository;
import com.example.demo.repositories.SubscriptionRepository;

import javax.transaction.Transactional;

@Service
public class UserService {
    @Autowired
    UserRepository userRepository;
    @Autowired
    BookRepository bookRepository;
    @Autowired
    SubscriptionRepository subscriptionRepository;
    @Autowired
    BorrowRepository borrowRepository;

    public String subscribe(Subscription subscription) {
        if (subscriptionRepository.existsByUserID(subscription.getUserID()).equals(new BigInteger(String.valueOf(1)))) {
            Subscription userSubscription = subscriptionRepository.findByUserID(subscription.getUserID());
            if (userSubscription.getEndDate().before(Date.valueOf(LocalDate.now()))){
                return "Your subscription ended, renew it!";
            }
            return "User already subscribed to the library.";
        }
        subscriptionRepository.save(subscription);
        return "User subscribed to the library!";
    }

    public String renewSubscription(Subscription subscription) {
        if (subscriptionRepository.existsByUserID(subscription.getUserID()).equals(new BigInteger(String.valueOf(1)))) {
            Subscription userSubscription = subscriptionRepository.findByUserID(subscription.getUserID());
            userSubscription.setStartDate(subscription.getStartDate());
            userSubscription.setEndDate(subscription.getEndDate());
            subscriptionRepository.saveAndFlush(userSubscription);
            return "Subscription renewed successfully!";
        }
        return "User is not subscribed in the library!";
    }

    public List<Book> getAllBooks() {
        return bookRepository.findAll();
    }

    public Subscription getUserSubscription(Integer userID) {
        List<Subscription> subscriptionList = subscriptionRepository.findAll();

        if (subscriptionList == null || subscriptionList.isEmpty()) {
            return null;
        }

        return subscriptionList.stream()
                .filter(subscription -> subscription.getUserID().equals(userID))
                .findFirst()
                .get();
    }

    public List<Borrow> getUserBorrowHistory(Integer userID) {
        List<Borrow> borrowList = borrowRepository.findAll();

        if (borrowList == null || borrowList.isEmpty()) {
            return null;
        }

        return borrowList.stream()
                .filter(borrow -> borrow.getUserID().equals(userID))
                .collect(Collectors.toList());
    }

    public String addUser(User user) {
        //useless since userID is autogenerated
        if (userRepository.existsById(user.getUserID())) {
            return "User already registered in the database!";
        }
        userRepository.save(user);
        return "User added successfully!";
    }

    public String addBook(Book book) {
        if (bookRepository.existsById(book.getSerialNumber())) {
            return "Book already in the database!";
        }
        bookRepository.save(book);
        return "Book added successfully!";
    }

    public String borrowBook(Integer userID, String serialNumber) {
        if (borrowRepository.existsByUserIDAndSerialNumber(userID, serialNumber).equals(new BigInteger(String.valueOf(1)))) {
            Borrow borrow = borrowRepository.findByUserIDAndSerialNumber(userID, serialNumber);
            if (borrow.getEndDate().after(Date.valueOf(LocalDate.now()))) {
                return "You already borrowed the book!";
            } else if (borrow.getEndDate().equals(Date.valueOf(LocalDate.now()))) {
                return "You have to extend the borrow.";
            }
            borrow.setStartDate(Date.valueOf(LocalDate.now()));
            borrowRepository.saveAndFlush(borrow);
            return "You borrowed the book again!";
        }
        borrowRepository.save(
                new Borrow(0, userID, serialNumber)
        );
        return "Borrowed the book successfully!";
    }

    public String extendBorrow(Integer userID, String serialNumber) {
        if (borrowRepository.existsByUserIDAndSerialNumber(userID, serialNumber).equals(new BigInteger(String.valueOf(1)))) {
            Borrow borrow = borrowRepository.findByUserIDAndSerialNumber(userID, serialNumber);
            if (borrow.getEndDate().equals(Date.valueOf(LocalDate.now()))) {
                borrow.setStartDate(Date.valueOf(LocalDate.now()));
                borrowRepository.saveAndFlush(borrow);
                return "Borrow extended successfully!";
            }
        }
        return "You have to borrow the book again!";
    }

    @Transactional
    public List<Book> findBooks(String serialNumber) {
        return bookRepository.findBookByName(serialNumber);
    }
}